Phase 4
1. Create a view named PlayerRankings that lists all players with their full name (first name and last name combined), country, and current world ranking, sorted by their world ranking in ascending order.
CREATE VIEW PlayerRankings AS 
	SELECT CONCAT(first_name,' ',last_name) AS full_name,
	country,
	current_world_ranking
	FROM Players
		ORDER BY current_world_ranking;

SELECT * FROM PlayerRankings;

2. Create a view named MatchResults that shows the details of each match, including the match date, the names of the players (both player1 and player2), and the name of the winner. If the match is yet to be completed, the winner should be displayed as 'TBD'.
CREATE VIEW MatchResults AS 
	SELECT m.match_date, 
		CONCAT(p1.first_name,' ',p1.last_name) as Player_1,
		CONCAT(p2.first_name,' ',p2.last_name) as Player_2,
		COALESCE(CONCAT(w.first_name,' ',w.last_name),'TBD') as Winner
		FROM Matches m
		JOIN Players p1 ON p1.player_id = m.player1_id
		JOIN Players p2 ON p2.player_id = m.player2_id
		JOIN Players w ON w.player_id = m.winner_id;

SELECT * FROM MatchResults;

3. Create a view named SponsorSummary that shows each sponsor's name, the total number of players they sponsor, and the total amount of sponsorship provided by them.
CREATE VIEW SponsorSummary AS
	SELECT s.sponsor_name, COUNT(ps.player_id) AS Players_sponsored,SUM(sponsorship_amount) as Total_amount FROM Player_Sponsors ps
	JOIN Sponsors s ON ps.sponsor_id=s.sponsor_id
	GROUP BY s.sponsor_id;

SELECT * FROM SponsorSummary;

4. Create a view named ActiveSponsorships that lists the active sponsorships (where the contract end date is in the future). The view should include the playerâ€™s full name, sponsor name, and sponsorship amount. Ensure the view allows updates to the sponsorship amount.
CREATE VIEW ActiveSponsorships AS
SELECT CONCAT(p.first_name,' ',p.last_name) as Player_Full_Name,
    s.sponsor_name,
    ps.sponsorship_amount,
	ps.contract_end_date
FROM Player_Sponsors ps
JOIN Players p ON ps.player_id=p.player_id
JOIN Sponsors s ON s.sponsor_id=ps.sponsor_id
WHERE ps.contract_end_date > CURRENT_DATE;

SELECT * FROM ActiveSponsorships;

5. Create a view named PlayerPerformanceSummary that provides a detailed summary of each player's performance in the chess tournament. The view should include the following columns:
Player Name: Full name of the player (concatenation of first_name and last_name).
Total Matches Played: The total number of matches the player has participated in.
Total Wins: The total number of matches the player has won.
Win Percentage: The percentage of matches won by the player.
Best Match Level: The highest level (either "International" or "National") where the player has won the most matches. If the player has an equal number of wins at both levels, the view should return "Balanced".
Ensure that the view accounts for players who have not won any matches by returning NULL for the Total Wins and Win Percentage columns, and appropriately handles the Best Match Level logic.

CREATE VIEW PlayerPerformanceSummary AS
SELECT 
    CONCAT(p.first_name,' ',p.last_name) AS Player_Name,
    p.total_matches_played AS Total_Matches_Played,
    COUNT(m.winner_id) AS Total_Wins,
    ROUND((COUNT(m.winner_id) * 100.0) / p.total_matches_played, 4) AS Win_Percentage,
    CASE 
        WHEN National > International THEN 'National'
        WHEN International > National THEN 'International'
        WHEN National = International THEN 'Balanced'
        ELSE 'No Winnning Daeta'
    END AS Best_Match_Level
FROM Players p
LEFT JOIN Matches m ON p.player_id = m.winner_id
LEFT JOIN (
    SELECT 
        winner_id,
        COUNT(CASE WHEN match_level = 'National' THEN 1 END) AS National,
        COUNT(CASE WHEN match_level = 'International' THEN 1 END) AS International
    FROM Matches
    GROUP BY winner_id
) mt 
	ON p.player_id = mt.winner_id
GROUP BY p.player_id, p.first_name, p.last_name, p.total_matches_played, National, International
ORDER BY Win_Percentage DESC;

SELECT *  FROM PlayerPerformanceSummary;